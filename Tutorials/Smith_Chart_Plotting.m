%% Smith Chart Plotting Demo
%
% The command 'smithplot' is the basic plotting command required for
% plotting on the smith chart. Although not explicitly states in the
% documentation (as far as I can see), when used as 'smithplot(freq, data)'
% the data being plotted are reflection coefficients, not impedances.
%
% Using the command 'refl()' included in MSTD, you can convert from
% impedances to reflection coefficients.
%
% Here's an example:

% Plot based on gamma - we'll use 1, i, -1, and -i to hit all four
% extremeties.

% Simple smith chart plot
figure(1);
smithplot([1,2,3,4], [1, i, -1, -i]);

% Now to move the vertex at +j1 to +j2, the following command does NOT work
figure(2);
smithplot([1,2,3,4], [1, 2*i, -1, -i]);
% This is because it's putting a vertex off-screen at a point twice as
% 'high' as +j1.

% To move the vertex to the point marked on the smith chart as +j2, we need
% to use an impedance plot, as shown below:
figure(3);
smithplot([1,2,3,4], refl( [1000, 2*j, 0, -i] , 1), 'LineStyle', ':', 'Color', [0, .7, 0], 'LineWidth', 1.5 );
% Notice all the classic MATLAB plotting style commands work here too

%% Plot Load Pull Contours
%
% As far as I'm aware, there is not a way to plot load pull contours as
% generated by AWR in MATLAB. AWR is dead set on only saving its load pull
% data to .mdf files. Although .mdf files can refer to both a format used
% by the automative industry and a seprate format used in SQL databases,
% this format appears to be neither. I believe it is a proprietary format
% used by AWR for which I would need to write a custom import function. 
%
% I have not investigated ADS's import/export abilities. Perhaps it can
% read AWR's .mdf files and save them in a more accessible format.
%
% This example below shows the problem with saving a load pull measurement
% to a MAT file - AWR does not actually store the points at which the
% contours should be. As such, the plots below do not work - power data is
% given where gamma or impedance data should be.
%

% Read data
load("G_LPCM.mat");

% Get dimensions of data
[rows, ~] = size(Pload);

figure(1);
hold off;
for r = 1:rows
	
	smithplot(freq, Pload(r,:));
	hold on;
	
end








